<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>bookShop</display-name>
	
	<!-- spring WebMVC框架提供了org.springframework.web.filter.CharacterEncodingFilter
	用于解决POST方式造成的中文乱码问题 以后我们项目及所有页面的编码均为UTF-8。 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 对购买 下订单 过滤为 必须是注册了的用户 -->
<!-- 	<filter>
		<filter-name>loginmmmmmmmfilter</filter-name>
		<filter-class>com.step.filter.LoginFilter</filter-class>
		<init-param>
			<param-name>urlParam</param-name>
			<param-value>用户能访问的页面 ，包括js css </param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>loginmmmmmmmfilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	 -->
	<!-- 配置spring mvc -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--配置spring文件位置 ,这样可以解析spring-mvc.xml的文件 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring-mvc.xml</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>*.htm</url-pattern>   <!--定义 url类型 -->
		<!-- url-pattern：表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以htm为扩展名的请求。 -->
	</servlet-mapping>



	<!-- 配置spring ，将application加载并实例化 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	
	
	
	
	
	<listener>
		<listener-class>com.step.listener.ApplicationListener</listener-class>
	</listener>

	<!-- 	<filter>  
	  
    <filter-name>OpenSessionInViewFilter</filter-name>  
 
     <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>  
 
      <init-param>   
 
          <param-name>flushMode</param-name>   
 
          <param-value>AUTO</param-value>   
 
      </init-param>  
	  
	</filter>  
  
	<filter-mapping>  
	  
	     <filter-name>OpenSessionInViewFilter</filter-name>  
	  
	     <url-pattern>*.htm</url-pattern>  
	  
	</filter-mapping>  -->




	<!-- 另外需要对url访问进行过滤，防止直接访问后台资源，这里拦截.htm访问，对一些前台需要用到的静态资源则可以跳过过滤不设拦截 配置spring 
		filter <filter> <filter-name>permissionFilter</filter-name> <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> 
		<init-param> <param-name>targetFilterLifecycle</param-name> <param-value>true</param-value> 
		</init-param> </filter> <filter-mapping> <filter-name>permissionFilter</filter-name> 
		<url-pattern>*.htm</url-pattern> </filter-mapping> jpg,png,js,css 文件不进行过滤 
		<servlet-mapping> <servlet-name>default</servlet-name> <url-pattern>*.jpg</url-pattern> 
		</servlet-mapping> <servlet-mapping> <servlet-name>default</servlet-name> 
		<url-pattern>*.png</url-pattern> </servlet-mapping> <servlet-mapping> <servlet-name>default</servlet-name> 
		<url-pattern>*.js</url-pattern> </servlet-mapping> <servlet-mapping> <servlet-name>default</servlet-name> 
		<url-pattern>*.css</url-pattern> </servlet-mapping> -->

</web-app>